generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Criterio {
  id          Int       @id @default(autoincrement())
  nombre      String
  descripcion String
  create_at   DateTime  @default(now())
  update_at   DateTime  @default(now())
  deleted     Boolean   @default(false)
  Rubrica     Rubrica[]
}

model Endpoint {
  id             Int           @id @default(autoincrement())
  nombre         String?
  metodo         Tipo
  num_parametros Int
  create_at      DateTime      @default(now())
  update_at      DateTime      @default(now())
  deleted        Boolean       @default(false)
  RolEndpoint    RolEndpoint[]
}

model Equipo {
  id            Int          @id @default(autoincrement())
  nombre_equipo String       @unique
  url_logo      String
  estado        Estado       @default(Pendiente_confirmacion)
  create_at     DateTime     @default(now())
  update_at     DateTime     @default(now())
  deleted       Boolean      @default(false)
  Estudiante    Estudiante[]
  Videojuego    Videojuego[]
}

model Estudiante {
  id            Int             @id @default(autoincrement())
  equipo_id     Int
  id_user       Int             @unique
  github        String
  confirmado    Boolean         @default(false)
  create_at     DateTime        @default(now())
  update_at     DateTime        @default(now())
  deleted       Boolean         @default(false)
  Equipo        Equipo          @relation(fields: [equipo_id], references: [id])
  Usuario       Usuario         @relation(fields: [id_user], references: [id])
  EstudianteNRC EstudianteNRC[]
}

model EstudianteNRC {
  id_nrc        Int
  id_estudiante Int
  create_at     DateTime   @default(now())
  deleted       Boolean    @default(false)
  Estudiante    Estudiante @relation(fields: [id_estudiante], references: [id])
  NRC           NRC        @relation(fields: [id_nrc], references: [codigo_nrc])

  @@id([id_nrc, id_estudiante])
}

model Evaluacion {
  id            Int        @id @default(autoincrement())
  jurado_id     Int
  videojuego_id Int
  comentarios   String
  create_at     DateTime   @default(now())
  update_at     DateTime   @default(now())
  deleted       Boolean    @default(false)
  Jurado        Jurado     @relation(fields: [jurado_id], references: [id])
  Videojuego    Videojuego @relation(fields: [videojuego_id], references: [id])
  Rubrica       Rubrica[]

  @@unique([jurado_id, videojuego_id])
}

model Jurado {
  id                 Int                  @id @default(autoincrement())
  id_user            Int                  @unique
  estado             EstadoJurado         @default(no_confirmado)
  token_confirmacion String
  ultima_conexion    DateTime
  create_at          DateTime             @default(now())
  update_at          DateTime             @default(now())
  deleted            Boolean              @default(false)
  Evaluacion         Evaluacion[]
  Usuario            Usuario              @relation(fields: [id_user], references: [id])
  VideojuegoAsignado VideojuegoAsignado[]
}

model Materia {
  id        Int      @id @default(autoincrement())
  nombre    String
  codigo    String   @unique
  create_at DateTime @default(now())
  update_at DateTime @default(now())
  deleted   Boolean  @default(false)
  NRC       NRC[]
}

model NRC {
  codigo_nrc    Int             @id @default(autoincrement())
  materia_id    Int
  profesor_id   Int
  create_at     DateTime        @default(now())
  update_at     DateTime        @default(now())
  deleted       Boolean         @default(false)
  EstudianteNRC EstudianteNRC[]
  Materia       Materia         @relation(fields: [materia_id], references: [id])
  Usuario       Usuario         @relation(fields: [profesor_id], references: [id])
}

model Rol {
  id          Int           @id @default(autoincrement())
  nombre      String
  create_at   DateTime      @default(now())
  update_at   DateTime      @default(now())
  deleted     Boolean       @default(false)
  RolEndpoint RolEndpoint[]
  RolUsuario  RolUsuario[]
}

model RolEndpoint {
  id_rol      Int
  id_endpoint Int
  create_at   DateTime @default(now())
  deleted     Boolean  @default(false)
  Endpoint    Endpoint @relation(fields: [id_endpoint], references: [id])
  Rol         Rol      @relation(fields: [id_rol], references: [id])

  @@id([id_endpoint, id_rol])
}

model RolUsuario {
  id_usuario Int
  id_rol     Int
  create_at  DateTime @default(now())
  deleted    Boolean  @default(false)
  Rol        Rol      @relation(fields: [id_rol], references: [id])
  Usuario    Usuario  @relation(fields: [id_usuario], references: [id])

  @@id([id_rol, id_usuario])
}

model Rubrica {
  id_evaluacion Int
  id_criterio   Int
  valoracion    Int
  create_at     DateTime   @default(now())
  deleted       Boolean    @default(false)
  Criterio      Criterio   @relation(fields: [id_criterio], references: [id])
  Evaluacion    Evaluacion @relation(fields: [id_evaluacion], references: [id])

  @@id([id_criterio, id_evaluacion])
}

model Usuario {
  id              Int          @id @default(autoincrement())
  nombre_completo String
  email           String       @unique
  hash_contrasena String
  create_at       DateTime     @default(now())
  update_at       DateTime     @default(now())
  deleted         Boolean      @default(false)
  Estudiante      Estudiante?
  Jurado          Jurado?
  NRC             NRC[]
  RolUsuario      RolUsuario[]
}

model Videojuego {
  id                 Int                  @id @default(autoincrement())
  equipo_id          Int
  nombre_videojuego  String
  descripcion        String
  create_at          DateTime             @default(now())
  update_at          DateTime             @default(now())
  deleted            Boolean              @default(false)
  Evaluacion         Evaluacion[]
  Equipo             Equipo               @relation(fields: [equipo_id], references: [id])
  VideojuegoAsignado VideojuegoAsignado[]
}

model VideojuegoAsignado {
  id_videojuego Int
  id_jurado     Int
  create_at     DateTime   @default(now())
  deleted       Boolean    @default(false)
  Jurado        Jurado     @relation(fields: [id_jurado], references: [id])
  Videojuego    Videojuego @relation(fields: [id_videojuego], references: [id])

  @@id([id_videojuego, id_jurado])
}

enum Estado {
  Pendiente_confirmacion
  Inscrito_confirmado
  Inscripcion_completa
  Rechazada
}

enum EstadoJurado {
  confirmado
  no_confirmado
}

enum Tipo {
  GET
  POST
  PUT
  DELETE
  PATCH
}
